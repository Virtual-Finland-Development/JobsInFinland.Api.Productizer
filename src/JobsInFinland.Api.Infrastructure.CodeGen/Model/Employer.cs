/*
 * Jobs in Finland
 *
 * API specification for Jobs in Finland API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = JobsInFinland.Api.Infrastructure.CodeGen.Client.OpenAPIDateConverter;

namespace JobsInFinland.Api.Infrastructure.CodeGen.Model
{
    /// <summary>
    /// Employer
    /// </summary>
    [DataContract(Name = "Employer")]
    public partial class Employer : IEquatable<Employer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="externalUrl">externalUrl.</param>
        /// <param name="careersUrl">careersUrl.</param>
        /// <param name="location">location.</param>
        /// <param name="source">source.</param>
        /// <param name="aliasForId">aliasForId.</param>
        public Employer(string id = default(string), string name = default(string), string imageUrl = default(string), string externalUrl = default(string), string careersUrl = default(string), Location location = default(Location), string source = default(string), string aliasForId = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.ImageUrl = imageUrl;
            this.ExternalUrl = externalUrl;
            this.CareersUrl = careersUrl;
            this.Location = location;
            this.Source = source;
            this.AliasForId = aliasForId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExternalUrl
        /// </summary>
        [DataMember(Name = "externalUrl", EmitDefaultValue = false)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// Gets or Sets CareersUrl
        /// </summary>
        [DataMember(Name = "careersUrl", EmitDefaultValue = false)]
        public string CareersUrl { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets AliasForId
        /// </summary>
        [DataMember(Name = "aliasForId", EmitDefaultValue = false)]
        public string AliasForId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Employer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  CareersUrl: ").Append(CareersUrl).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  AliasForId: ").Append(AliasForId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employer);
        }

        /// <summary>
        /// Returns true if Employer instances are equal
        /// </summary>
        /// <param name="input">Instance of Employer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ExternalUrl == input.ExternalUrl ||
                    (this.ExternalUrl != null &&
                    this.ExternalUrl.Equals(input.ExternalUrl))
                ) && 
                (
                    this.CareersUrl == input.CareersUrl ||
                    (this.CareersUrl != null &&
                    this.CareersUrl.Equals(input.CareersUrl))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.AliasForId == input.AliasForId ||
                    (this.AliasForId != null &&
                    this.AliasForId.Equals(input.AliasForId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.ExternalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalUrl.GetHashCode();
                }
                if (this.CareersUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CareersUrl.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.AliasForId != null)
                {
                    hashCode = (hashCode * 59) + this.AliasForId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
