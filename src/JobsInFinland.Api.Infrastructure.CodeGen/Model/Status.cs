/*
 * Jobs in Finland
 *
 * API specification for Jobs in Finland API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = JobsInFinland.Api.Infrastructure.CodeGen.Client.OpenAPIDateConverter;

namespace JobsInFinland.Api.Infrastructure.CodeGen.Model
{
    /// <summary>
    /// Status
    /// </summary>
    [DataContract(Name = "Status")]
    public partial class Status : IEquatable<Status>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="reviewStatus">reviewStatus.</param>
        /// <param name="hiddenBecause">hiddenBecause.</param>
        /// <param name="reportedBecause">reportedBecause.</param>
        /// <param name="transformations">transformations.</param>
        /// <param name="publicationStatus">publicationStatus.</param>
        public Status(string reviewStatus = default(string), HiddenBecause hiddenBecause = default(HiddenBecause), ReportedBecause reportedBecause = default(ReportedBecause), Transformations transformations = default(Transformations), string publicationStatus = default(string))
        {
            this.ReviewStatus = reviewStatus;
            this.HiddenBecause = hiddenBecause;
            this.ReportedBecause = reportedBecause;
            this.Transformations = transformations;
            this.PublicationStatus = publicationStatus;
        }

        /// <summary>
        /// Gets or Sets ReviewStatus
        /// </summary>
        [DataMember(Name = "reviewStatus", EmitDefaultValue = false)]
        public string ReviewStatus { get; set; }

        /// <summary>
        /// Gets or Sets HiddenBecause
        /// </summary>
        [DataMember(Name = "hiddenBecause", EmitDefaultValue = false)]
        public HiddenBecause HiddenBecause { get; set; }

        /// <summary>
        /// Gets or Sets ReportedBecause
        /// </summary>
        [DataMember(Name = "reportedBecause", EmitDefaultValue = false)]
        public ReportedBecause ReportedBecause { get; set; }

        /// <summary>
        /// Gets or Sets Transformations
        /// </summary>
        [DataMember(Name = "transformations", EmitDefaultValue = false)]
        public Transformations Transformations { get; set; }

        /// <summary>
        /// Gets or Sets PublicationStatus
        /// </summary>
        [DataMember(Name = "publicationStatus", EmitDefaultValue = false)]
        public string PublicationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  ReviewStatus: ").Append(ReviewStatus).Append("\n");
            sb.Append("  HiddenBecause: ").Append(HiddenBecause).Append("\n");
            sb.Append("  ReportedBecause: ").Append(ReportedBecause).Append("\n");
            sb.Append("  Transformations: ").Append(Transformations).Append("\n");
            sb.Append("  PublicationStatus: ").Append(PublicationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Status);
        }

        /// <summary>
        /// Returns true if Status instances are equal
        /// </summary>
        /// <param name="input">Instance of Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Status input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReviewStatus == input.ReviewStatus ||
                    (this.ReviewStatus != null &&
                    this.ReviewStatus.Equals(input.ReviewStatus))
                ) && 
                (
                    this.HiddenBecause == input.HiddenBecause ||
                    (this.HiddenBecause != null &&
                    this.HiddenBecause.Equals(input.HiddenBecause))
                ) && 
                (
                    this.ReportedBecause == input.ReportedBecause ||
                    (this.ReportedBecause != null &&
                    this.ReportedBecause.Equals(input.ReportedBecause))
                ) && 
                (
                    this.Transformations == input.Transformations ||
                    (this.Transformations != null &&
                    this.Transformations.Equals(input.Transformations))
                ) && 
                (
                    this.PublicationStatus == input.PublicationStatus ||
                    (this.PublicationStatus != null &&
                    this.PublicationStatus.Equals(input.PublicationStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReviewStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ReviewStatus.GetHashCode();
                }
                if (this.HiddenBecause != null)
                {
                    hashCode = (hashCode * 59) + this.HiddenBecause.GetHashCode();
                }
                if (this.ReportedBecause != null)
                {
                    hashCode = (hashCode * 59) + this.ReportedBecause.GetHashCode();
                }
                if (this.Transformations != null)
                {
                    hashCode = (hashCode * 59) + this.Transformations.GetHashCode();
                }
                if (this.PublicationStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PublicationStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
