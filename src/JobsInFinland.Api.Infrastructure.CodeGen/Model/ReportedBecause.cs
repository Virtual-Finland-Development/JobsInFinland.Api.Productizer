/*
 * Jobs in Finland
 *
 * API specification for Jobs in Finland API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: lassi.patanen@gofore.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = JobsInFinland.Api.Infrastructure.CodeGen.Client.OpenAPIDateConverter;

namespace JobsInFinland.Api.Infrastructure.CodeGen.Model
{
    /// <summary>
    /// ReportedBecause
    /// </summary>
    [DataContract(Name = "ReportedBecause")]
    public partial class ReportedBecause : IEquatable<ReportedBecause>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportedBecause" /> class.
        /// </summary>
        /// <param name="finnishRequired">finnishRequired.</param>
        /// <param name="notInFinland">notInFinland.</param>
        /// <param name="jobPostingExpired">jobPostingExpired.</param>
        /// <param name="duplicateJobPosting">duplicateJobPosting.</param>
        /// <param name="missingInformation">missingInformation.</param>
        /// <param name="wrongCategory">wrongCategory.</param>
        /// <param name="inaccurateTranslation">inaccurateTranslation.</param>
        public ReportedBecause(int finnishRequired = default(int), int notInFinland = default(int), int jobPostingExpired = default(int), int duplicateJobPosting = default(int), int missingInformation = default(int), int wrongCategory = default(int), int inaccurateTranslation = default(int))
        {
            this.FinnishRequired = finnishRequired;
            this.NotInFinland = notInFinland;
            this.JobPostingExpired = jobPostingExpired;
            this.DuplicateJobPosting = duplicateJobPosting;
            this.MissingInformation = missingInformation;
            this.WrongCategory = wrongCategory;
            this.InaccurateTranslation = inaccurateTranslation;
        }

        /// <summary>
        /// Gets or Sets FinnishRequired
        /// </summary>
        [DataMember(Name = "finnishRequired", EmitDefaultValue = false)]
        public int FinnishRequired { get; set; }

        /// <summary>
        /// Gets or Sets NotInFinland
        /// </summary>
        [DataMember(Name = "notInFinland", EmitDefaultValue = false)]
        public int NotInFinland { get; set; }

        /// <summary>
        /// Gets or Sets JobPostingExpired
        /// </summary>
        [DataMember(Name = "jobPostingExpired", EmitDefaultValue = false)]
        public int JobPostingExpired { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateJobPosting
        /// </summary>
        [DataMember(Name = "duplicateJobPosting", EmitDefaultValue = false)]
        public int DuplicateJobPosting { get; set; }

        /// <summary>
        /// Gets or Sets MissingInformation
        /// </summary>
        [DataMember(Name = "missingInformation", EmitDefaultValue = false)]
        public int MissingInformation { get; set; }

        /// <summary>
        /// Gets or Sets WrongCategory
        /// </summary>
        [DataMember(Name = "wrongCategory", EmitDefaultValue = false)]
        public int WrongCategory { get; set; }

        /// <summary>
        /// Gets or Sets InaccurateTranslation
        /// </summary>
        [DataMember(Name = "inaccurateTranslation", EmitDefaultValue = false)]
        public int InaccurateTranslation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportedBecause {\n");
            sb.Append("  FinnishRequired: ").Append(FinnishRequired).Append("\n");
            sb.Append("  NotInFinland: ").Append(NotInFinland).Append("\n");
            sb.Append("  JobPostingExpired: ").Append(JobPostingExpired).Append("\n");
            sb.Append("  DuplicateJobPosting: ").Append(DuplicateJobPosting).Append("\n");
            sb.Append("  MissingInformation: ").Append(MissingInformation).Append("\n");
            sb.Append("  WrongCategory: ").Append(WrongCategory).Append("\n");
            sb.Append("  InaccurateTranslation: ").Append(InaccurateTranslation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportedBecause);
        }

        /// <summary>
        /// Returns true if ReportedBecause instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportedBecause to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportedBecause input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FinnishRequired == input.FinnishRequired ||
                    this.FinnishRequired.Equals(input.FinnishRequired)
                ) && 
                (
                    this.NotInFinland == input.NotInFinland ||
                    this.NotInFinland.Equals(input.NotInFinland)
                ) && 
                (
                    this.JobPostingExpired == input.JobPostingExpired ||
                    this.JobPostingExpired.Equals(input.JobPostingExpired)
                ) && 
                (
                    this.DuplicateJobPosting == input.DuplicateJobPosting ||
                    this.DuplicateJobPosting.Equals(input.DuplicateJobPosting)
                ) && 
                (
                    this.MissingInformation == input.MissingInformation ||
                    this.MissingInformation.Equals(input.MissingInformation)
                ) && 
                (
                    this.WrongCategory == input.WrongCategory ||
                    this.WrongCategory.Equals(input.WrongCategory)
                ) && 
                (
                    this.InaccurateTranslation == input.InaccurateTranslation ||
                    this.InaccurateTranslation.Equals(input.InaccurateTranslation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FinnishRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.NotInFinland.GetHashCode();
                hashCode = (hashCode * 59) + this.JobPostingExpired.GetHashCode();
                hashCode = (hashCode * 59) + this.DuplicateJobPosting.GetHashCode();
                hashCode = (hashCode * 59) + this.MissingInformation.GetHashCode();
                hashCode = (hashCode * 59) + this.WrongCategory.GetHashCode();
                hashCode = (hashCode * 59) + this.InaccurateTranslation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
